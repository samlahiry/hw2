gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
length(v)
length(j_par)
mat=matrix(0,nrow=6,ncol=100)
for(j in 1: 100)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,i]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
dim(mat)
for(j in 1: 100)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
}
plot(mat[2,],mat[1,])
plot(mat[2,],mat[1,],ty='l')
for(j in 1: 100)
{
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,i]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
j_seq
dim(A)
length(L+U)
dim(L+U)
norm=function(x) sqrt(sum(x^2))
n=1000
alpha=3
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=100)
for(j in 1: 100)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,i]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
length(v)
norm(j_seq-v)/norm(v)
for(j in 1: 100)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,j]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
require(doParallel)
ncores = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS"))
cl= makeCluster(ncores)
registerDoParallel(cl)
for(j in 1: 100)
{
ptm=proc.time()
vec1=foreach(i=1:n) %dopar%
{(L+U)[i,]%*%j_par}
j_par=(1/alpha)*(b-unlist(vec1))
mat[5,j]=norm(j_par-v)/norm(v)
if(j==1)
mat[6,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[6,j]=mat[6,j-1]+as.numeric((proc.time()-ptm)[3])
}
stopCluster(cl)
plot(mat[,4],mat[,6],ty='l')
norm=function(x) sqrt(sum(x^2))
n=1000
alpha=1
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=100)
for(j in 1: 100)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,j]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
LU=L+U
require(doParallel)
ncores = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS"))
cl= makeCluster(ncores)
registerDoParallel(cl)
for(j in 1: 100)
{
ptm=proc.time()
vec1=foreach(i=1:n) %dopar%
{(L+U)[i,]%*%j_par}
j_par=(1/alpha)*(b-unlist(vec1))
mat[5,j]=norm(j_par-v)/norm(v)
if(j==1)
mat[6,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[6,j]=mat[6,j-1]+as.numeric((proc.time()-ptm)[3])
}
stopCluster(cl)
norm=function(x) sqrt(sum(x^2))
n=100
alpha=1
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=10000)
for(j in 1: 10000)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,j]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
require(doParallel)
ncores = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS"))
cl= makeCluster(ncores)
registerDoParallel(cl)
for(j in 1: 10000)
{
ptm=proc.time()
vec1=foreach(i=1:n) %dopar%
{(L+U)[i,]%*%j_par}
j_par=(1/alpha)*(b-unlist(vec1))
mat[5,j]=norm(j_par-v)/norm(v)
if(j==1)
mat[6,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[6,j]=mat[6,j-1]+as.numeric((proc.time()-ptm)[3])
}
stopCluster(cl)
plot(1:10000,)
norm=function(x) sqrt(sum(x^2))
n=100
alpha=1
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=10000)
for(j in 1: 10000)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,j]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
require(doParallel)
ncores = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS"))
cl= makeCluster(ncores)
registerDoParallel(cl)
for(j in 1: 10000)
{
ptm=proc.time()
vec1=foreach(i=1:n) %dopar%
{(L+U)[i,]%*%j_par}
j_par=(1/alpha)*(b-unlist(vec1))
mat[5,j]=norm(j_par-v)/norm(v)
if(j==1)
mat[6,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[6,j]=mat[6,j-1]+as.numeric((proc.time()-ptm)[3])
}
stopCluster(cl)
plot(1:10000,mat[1,],xlab="iteration",ylab="Relative Errors")
plot(1:10000,mat[1,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(1:10000,mat[3,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(1:10000,mat[5,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(mat[2,],mat[1,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(mat[4,],mat[3,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(mat[6,],mat[5,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(1:10000,mat[5,],xlab="Run time",ylab="Relative Errors",ty='l')
norm=function(x) sqrt(sum(x^2))
n=100
alpha=2
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=10000)
for(j in 1: 10000)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,j]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
require(doParallel)
ncores = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS"))
cl= makeCluster(ncores)
registerDoParallel(cl)
for(j in 1: 10000)
{
ptm=proc.time()
vec1=foreach(i=1:n) %dopar%
{(L+U)[i,]%*%j_par}
j_par=(1/alpha)*(b-unlist(vec1))
mat[5,j]=norm(j_par-v)/norm(v)
if(j==1)
mat[6,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[6,j]=mat[6,j-1]+as.numeric((proc.time()-ptm)[3])
}
stopCluster(cl)
plot(1:10000,mat[1,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(1:10000,mat[3,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(1:10000,mat[5,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(mat[2,],mat[1,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(mat[4,],mat[3,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(mat[6,],mat[5,],xlab="Run time",ylab="Relative Errors",ty='l')
norm=function(x) sqrt(sum(x^2))
n=100
alpha=3
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=10000)
for(j in 1: 10000)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,j]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
require(doParallel)
ncores = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS"))
cl= makeCluster(ncores)
registerDoParallel(cl)
for(j in 1: 10000)
{
ptm=proc.time()
vec1=foreach(i=1:n) %dopar%
{(L+U)[i,]%*%j_par}
j_par=(1/alpha)*(b-unlist(vec1))
mat[5,j]=norm(j_par-v)/norm(v)
if(j==1)
mat[6,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[6,j]=mat[6,j-1]+as.numeric((proc.time()-ptm)[3])
}
stopCluster(cl)
plot(1:10000,mat[1,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(1:10000,mat[3,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(1:10000,mat[5,],xlab="iteration",ylab="Relative Errors",ty='l')
plot(mat[2,],mat[1,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(mat[4,],mat[3,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(mat[6,],mat[5,],xlab="Run time",ylab="Relative Errors",ty='l')
plot(mat[4,],mat[6,])
plot(mat[4,],mat[6,],ty='l',xlab="jacobi_seq",ylab="jacobi_par",ty='l')
plot(mat[4,],mat[6,],ty='l',xlab="jacobi_seq",ylab="jacobi_par")
plot(1:10,mat[5,1:10],xlab="iteration",ylab="Relative Errors",ty='l')
n=100
alpha=1
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=10000)
for(j in 1: 10000)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
}
plot(1:10,mat[1,1:10],xlab="iteration",ylab="Relative Errors",ty='l')
norm=function(x) sqrt(sum(x^2))
n=10000
alpha=3
D=alpha*diag(n)
L=matrix(0,n,n)
U=matrix(0,n,n)
for(i in 1:(n-1))
{
L[i+1,i]=-1
U[i,i+1]=-1
}
v=rep(c(1,0),n/2)
A=L+D+U
b=A%*%v
gs=numeric(n)
j_seq=numeric(n)
j_par=numeric(n)
mat=matrix(0,nrow=6,ncol=10)
for(j in 1: 10)
{
ptm=proc.time()
gs=solve(L+D)%*%(b-U%*%gs)
mat[1,j]=norm(gs-v)/norm(v)
if(j==1)
mat[2,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[2,j]=mat[2,j-1]+as.numeric((proc.time()-ptm)[3])
ptm=proc.time()
j_seq=(1/alpha)*(b-(L+U)%*%j_seq)
mat[3,j]=norm(j_seq-v)/norm(v)
if(j==1)
mat[4,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[4,j]=mat[4,j-1]+as.numeric((proc.time()-ptm)[3])
}
require(doParallel)
ncores = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS"))
cl= makeCluster(ncores)
registerDoParallel(cl)
for(j in 1: 10)
{
ptm=proc.time()
vec1=foreach(i=1:n) %dopar%
{(L+U)[i,]%*%j_par}
j_par=(1/alpha)*(b-unlist(vec1))
mat[5,j]=norm(j_par-v)/norm(v)
if(j==1)
mat[6,j]=as.numeric((proc.time()-ptm)[3])
if(j>1)
mat[6,j]=mat[6,j-1]+as.numeric((proc.time()-ptm)[3])
}
mat[1,]
mat[2,]
mat[3,]
mat[4,]
mat[5,]
mat[6,]
?sample
diag(1/sqrt(rep(4,4)))
setwd("C:\\Users\\Samriddha Lahiry\\OneDrive - Cornell University\\Documents\\GitHub")
create(hw2)
devtools::create("hw2"")
devtools::create("hw2")
library(roxygen2)
getwd()
setwd("..//hw2")
document()
library(devtools)
document()
getwd()
setwd("C://Users//Samriddha Lahiry//OneDrive - Cornell University//Documents//GitHub//hw2")
getwd()
document()
setwd("..")
devtools::install("hw2")
